<?php
/**
 * Created by PhpStorm.
 * User: pavel
 * Date: 2/1/19
 * Time: 1:43 AM
 */

namespace Application;
require "../Application/pen.php";


use PHPUnit\Framework\TestCase;




class PenTest extends TestCase
{
    private $inkContValue = 10;
    private $letterSize = 1.0;
    private $color = "green";
    private $word = 'word';
    private $symbols = '10Symbols!';

    public function anyTypeToString($type)
    {
        switch (gettype($type)) {
            case 'integer':
                return $type;
                break;
            case 'double':
                return $type;
                break;
            case 'string':
                return $type;
                break;
            case 'boolean':
                if ($type == 1) {
                    $type = 'trye';
                } else {
                    $type = 'false';
                }
                return $type;
                break;
            case 'float':
                return $type;
                break;
            case 'array':
                $type = 'array';
                return $type;
                break;
        }
    }

    /**
     * @dataProvider inkValue
     */


    public function test__construct($inkContValue)
    {

        $pen = new Pen($inkContValue);
        $this->assertEquals(
            true,
            is_object($pen) && $pen instanceof Pen,
            'Case 1: It should be possible to create a pen with valid ink value type: ');
    }

    public static function inkValue()
    {
        return array(
            [1],
            [2147483647]
        );
    }
//

    /**
     * @dataProvider invalidInkValue
     */

    public function testinvalid__Construct($invalidInkValue)
    {

        try {
            $pen = new Pen($invalidInkValue);
            $this->assertEquals(
                true,
                is_object($pen) && $pen instanceof Pen);
        } catch (InvalidArgumentException $e) {
            return $e;
        }
        $this->anyTypeToString($invalidInkValue);
     $this->fail('Case 2: It should be impossible to create a pen with invalid ink value type: ' . $this->anyTypeToString($invalidInkValue));


    }

    public static function invalidInkValue()
    {
        return array(
            [-1],
            ['string'],
            [true],
            [false],
            [2147483648],
            [3.3],
            [array([1], [2], [3])]
        );
    }


    public function testCreatePenWithSizeLetter()
    {
        $pen = Pen::createPenWithSizeLetter($this->inkContValue, $this->letterSize);
        $this->assertEquals(
            true,
            is_object($pen) && $pen instanceof Pen,
            'Case 3: It should be possible to create a pen with valid letter size: ' . $this->letterSize);

    }

    /**
     * @dataProvider sizeLetter
     */

    public function testCreatePenWithInvalidSizeLetter($sizeLetter)
    {
        try {
            $pen = Pen::createPenWithSizeLetter($this->inkContValue, $sizeLetter);
            $this->assertEquals(
                true,
                is_object($pen) && $pen instanceof Pen);
        } catch (Exception $e) {
            return $e;
        }

      $this->fail('Case 4: It should be impossible to create a pen with invalid letter size type: ' . $this->anyTypeToString($sizeLetter));

    }


    public static function sizeLetter()
    {
        return array(
            [-1],
            [0],
            ['string'],
            [false],
            [array([1], [2], [3])]
        );
    }


    public function testCreatePenWithSizeLetterAndColor()
    {
        $pen = Pen::createPenWithSizeLetterAndColor($this->inkContValue, $this->letterSize, $this->color);
        $this->assertEquals(
            true,
            is_object($pen) && $pen instanceof Pen,
            'Case 5: It should be possible to create a pen with valid color:' . $this->inkContValue);
    }


    /**
     * @dataProvider invalidColor
     */

    public function testCreatePenWithSizeLetterAndInvalidColor($color)
    {
        try {
            $pen = Pen::createPenWithSizeLetterAndColor($this->inkContValue, $this->letterSize, $color);
            $this->assertEquals(
                true,
                is_object($pen) && $pen instanceof Pen,);
        } catch (Exception $e) {
            return $e;
        }

        $this->fail('Case 6: It should be impossible to create a pen with invalid color value type: ' . $this->anyTypeToString($color));

    }

    public static function invalidColor()
    {
        return array(
            [4],
            [3.4],
            [true],
            [array([1], [2], [3])]
        );
    }


    public function testIsWork()
    {
        $pen = Pen::createPenWithSizeLetterAndColor($this->inkContValue, $this->letterSize, $this->color);
        $this->assertEquals(
            true,
            $pen->isWork(),
            'Case 7: It should be possible to work with valid ink value:' . $this->inkContValue);

    }

//

    /**
     * @dataProvider falseInkValue
     */

    public function testIsNotWork($falseInkValue)
    {
        $pen = Pen::createPenWithSizeLetterAndColor($falseInkValue, $this->letterSize, $this->color);


        $this->assertEquals(
            false,
            $pen->isWork(),
            'Case 8: It should be impossible to work with invalid ink value: : ' . $this->anyTypeToString($falseInkValue));

    }

    public static function falseInkValue()
    {
        return array(
            [-1],
            [0],
            ['string'],
            [false],
            [array([1], [2], [3])]
        );
    }


    public function testWrite()
    {
        $pen = Pen::createPenWithSizeLetterAndColor($this->inkContValue, $this->letterSize, $this->color);

        $this->assertEquals(
            $this->word,
            $pen->Write('word'),
            'Case9: It should be possible to write: ' . $this->word);

    }

    public function testLimitWrite()
    {
        $pen = Pen::createPenWithSizeLetterAndColor($this->inkContValue, $this->letterSize, $this->color);
        $pen->Write($this->symbols);
        $this->assertEquals(
            '',
            $pen->Write($this->symbols),
            'Case10: It should be impossible to write: ' . $this->symbols);
    }

    public function testLimitWriteSpace()
    {
        $pen = Pen::createPenWithSizeLetterAndColor($this->inkContValue, $this->letterSize, $this->color);
        $pen->Write("          ");
        $this->assertEquals(
            $this->symbols,
            $pen->Write($this->symbols),
            'Case11: It should be possible to write: ' . $this->symbols);
    }

    public function testSizeWrite()
    {
        $pen = Pen::createPenWithSizeLetterAndColor($this->inkContValue, 2.0, $this->color);
        $this->assertEquals(
            '10Sym',
            $pen->Write('10Symbols!'),
            'Case12: It should be possible to write more than: '.$this->inkContValue/2.0.' simbols');


    }

    /**
     * @dataProvider colorValue
     */

    public function testGetColor($color)
    {
        $pen = Pen::createPenWithSizeLetterAndColor($this->inkContValue, $this->letterSize, $color);
        $this->assertEquals(
            $color,
            $pen->getColor(),
            'Case13: Function should return: '.$color);
    }

    public static function colorValue()
    {
        return array(
            ['red'],
            ['green'],
            ['BLUE'],
        );
    }

    /**
     * @dataProvider colorValue
     */

    public function testDoSomethingElse($color)
    {
        $pen = Pen::createPenWithSizeLetter($this->inkContValue, $this->letterSize, $color);
        ob_start();
        $pen->DoSomethingElse();
        $a = ob_get_contents();
        $this->assertEquals(
            $color,
            $a,
            'Case14: Function should return: '.$color);
    }


}

